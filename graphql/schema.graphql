type User {
  id: ID!
  name: String!
  email: String!
  articles: [Article!]!
}

type Article {
  id: ID!
  title: String!
  englishTitle: String!
  content: String!
  status: ArticleStatus!
  isPinned: Boolean!
  createdAt: String!
  updatedAt: String!
  author: User!
  category: Category
  tags: [Tag!]!
  comments: [Comment!]!
}

type Category {
  id: ID!
  name: String!
  parent: Category
  children: [Category!]!
}

type Tag {
  id: ID!
  name: String!
}

type Comment {
  id: ID!
  content: String!
  authorName: String
  authorEmail: String
  user: User
  parent: Comment
  replies: [Comment!]!
  isPinned: Boolean!
  status: CommentStatus!
  createdAt: String!
  updatedAt: String!
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

type Query {
  articles(status: ArticleStatus, isPinned: Boolean): [Article!]!
  article(id: ID!): Article
  articleBySlug(slug: String!): Article
  trashedPosts: [Post!]!

  categories: [Category!]!
  category(id: ID!): Category
  categoryBySlug(slug: String!): Category

  tags: [Tag!]!
  tag(id: ID!): Tag

  comments(articleId: ID!): [Comment!]!
}

type Mutation {
  createArticle(
    title: String!
    content: String!
    authorId: ID!
    categoryId: ID!
    tagIds: [ID!]
  ): Article!
  updatePost(
    id: ID!
    title: String
    content: String
    status: ArticleStatus
    isPinned: Boolean
  ): Article!
  softDeleteArticle(id: ID!): Article!
  restoreArticle(id: ID!): Article!
  hardDeleteArticle(id: ID!): Boolean!

  createComment(
    articleId: ID!
    content: String!
    authorName: String
    authorEmail: String
    UserId: ID
    parentId: ID
  ): Comment!
  approveComment(id: ID!): Comment!
  rejectComment(id: ID!): Comment!
  softDeleteComment(id: ID!): Comment!
  hardDeleteComment(id: ID!): Boolean!
}
