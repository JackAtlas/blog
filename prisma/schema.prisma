// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  articles Article[]
  comments Comment[]
}

model Article {
  id Int @id @default(autoincrement())
  title String
  englishTitle String
  content String
  slug String @unique
  excerpt String?
  status ArticleStatus @default(DRAFT)
  isPinned Boolean @default(false)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authorId Int

  category Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  tags Tag[]
  comments Comment[]
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  slug String @unique
  parent Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId Int?
  children Category[] @relation("CategoryHierarchy")
  articles Article[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id Int @id @default(autoincrement())
  name String @unique
  slug String @unique
  articles Article[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id Int @id @default(autoincrement())
  content String
  authorName String?
  authorEmail String?
  status CommentStatus @default(PENDING)
  isPinned Boolean @default(false)
  deletedAt DateTime?
  article Article @relation(fields: [articleId], references: [id])
  articleId Int
  user User? @relation(fields: [userId], references: [id])
  userId Int?
  parent Comment? @relation("CommentHierarchy", fields: [parentId], references: [id])
  parentId Int?
  replies Comment[] @relation("CommentHierarchy")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}